openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: 'http://localhost:8080'
    description: Generated server url
paths:
  '/api/procurements/{id}':
    get:
      tags:
        - miniprocurement-controller
      operationId: getById_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MiniProcurementDto'
    put:
      tags:
        - miniprocurement-controller
      operationId: updateProcurement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiniProcurementDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MiniProcurementDto'
    delete:
      tags:
        - miniprocurement-controller
      operationId: deleteProcurement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
      deprecated: true
  '/api/announcements/{id}':
    get:
      tags:
        - announcement-controller
      operationId: getById_6
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
    put:
      tags:
        - announcement-controller
      operationId: updateAnnouncement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
    delete:
      tags:
        - announcement-controller
      operationId: deleteAnnouncement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
      deprecated: true
  /api/replies:
    get:
      tags:
        - reply-controller
      operationId: getByParams
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ReplySearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplyDto'
    post:
      tags:
        - reply-controller
      operationId: addReply
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReplyDto'
  /api/questions:
    get:
      tags:
        - question-controller
      operationId: getByParams_1
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/QuestionSearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
    post:
      tags:
        - question-controller
      operationId: addQuestion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuestionDto'
  /api/procurements:
    get:
      tags:
        - miniprocurement-controller
      operationId: getByParams_2
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/MiniprocurementSearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MiniProcurementDto'
    post:
      tags:
        - miniprocurement-controller
      operationId: addProcurement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiniProcurementDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MiniProcurementDto'
  /api/announcements:
    get:
      tags:
        - announcement-controller
      operationId: getByParams_6
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/AnnouncementSearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnnouncementDto'
    post:
      tags:
        - announcement-controller
      operationId: addAnnouncement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnnouncementDto'
  '/api/replies/{id}':
    get:
      tags:
        - reply-controller
      operationId: getById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReplyDto'
    delete:
      tags:
        - reply-controller
      operationId: deleteReply
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
      deprecated: true
  '/api/questions/{id}':
    get:
      tags:
        - question-controller
      operationId: getById_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QuestionDto'
    delete:
      tags:
        - question-controller
      operationId: deleteQuestion
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
      deprecated: true
  /api/person:
    get:
      tags:
        - person-controller
      operationId: getByParams_3
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PersonSearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonDto'
  '/api/person/{id}':
    get:
      tags:
        - person-controller
      operationId: getById_3
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonDto'
  /api/partner:
    get:
      tags:
        - partner-controller
      operationId: getByParams_4
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PartnerSearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartnerDto'
  '/api/partner/{id}':
    get:
      tags:
        - partner-controller
      operationId: getById_4
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PartnerDto'
  /api/employee:
    get:
      tags:
        - employee-controller
      operationId: getByParams_5
      parameters:
        - name: searchObject
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EmployeeSearch'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDto'
  '/api/employee/{id}':
    get:
      tags:
        - employee-controller
      operationId: getById_5
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeDto'
  /api/email:
    get:
      tags:
        - email-test-controller
      operationId: sendMail
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/auth/login:
    get:
      tags:
        - auth-controller
      operationId: login
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/auth/group1:
    get:
      tags:
        - auth-controller
      operationId: group1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
      deprecated: true
  /api/auth/employee:
    get:
      tags:
        - auth-controller
      operationId: getEmployeeResponse
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
  /api/auth/details:
    get:
      tags:
        - auth-controller
      operationId: user
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DefaultOidcUser'
      deprecated: true
components:
  schemas:
    MiniProcurementDto:
      required:
        - deadline
        - procurementName
      type: object
      properties:
        procurementId:
          type: integer
          format: int32
        procurementName:
          type: string
        amount:
          type: integer
          format: int32
        description:
          type: string
        requirements:
          type: string
        contractId:
          type: integer
          format: int32
        timeAdded:
          type: string
          format: date-time
        addedBy:
          type: integer
          format: int32
        deadline:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        timeFinished:
          type: string
          format: date-time
    AnnouncementDto:
      required:
        - announcement
        - employeeId
        - procurementId
      type: object
      properties:
        announcementId:
          type: integer
          format: int32
        procurementId:
          type: integer
          format: int32
        employeeId:
          type: integer
          format: int32
        announcement:
          type: string
        dateAdded:
          type: string
          format: date-time
    ReplyDto:
      required:
        - procurementId
        - questionId
        - replierId
      type: object
      properties:
        replyId:
          type: integer
          format: int32
        replierId:
          type: integer
          format: int32
        questionId:
          type: integer
          format: int32
        procurementId:
          type: integer
          format: int32
        reply:
          type: string
        timeReplied:
          type: string
          format: date-time
    QuestionDto:
      required:
        - askerId
        - procurementId
        - question
      type: object
      properties:
        questionId:
          type: integer
          format: int32
        askerId:
          type: string
        procurementId:
          type: integer
          format: int32
        question:
          type: string
        timeAsked:
          type: string
          format: date-time
    Pageable:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
    ReplySearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackReply'
    SearchSpecPackReply:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationReply'
        pageable:
          $ref: '#/components/schemas/Pageable'
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    SpecificationReply:
      type: object
    QuestionSearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackQuestion'
    SearchSpecPackQuestion:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationQuestion'
        pageable:
          $ref: '#/components/schemas/Pageable'
    SpecificationQuestion:
      type: object
    MiniprocurementSearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackMiniprocurement'
    SearchSpecPackMiniprocurement:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationMiniprocurement'
        pageable:
          $ref: '#/components/schemas/Pageable'
    SpecificationMiniprocurement:
      type: object
    PersonSearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        name:
          type: string
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackPerson'
    SearchSpecPackPerson:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationPerson'
        pageable:
          $ref: '#/components/schemas/Pageable'
    SpecificationPerson:
      type: object
    PersonDto:
      type: object
      properties:
        personID:
          type: integer
          format: int32
        personName:
          type: string
        timeOfRegister:
          type: string
          format: date-time
        regNr:
          type: integer
          format: int64
        partnerInfo:
          type: string
        email:
          type: string
    PartnerSearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        name:
          type: string
        regNr:
          type: integer
          format: int64
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackPartner'
    SearchSpecPackPartner:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationPartner'
        pageable:
          $ref: '#/components/schemas/Pageable'
    SpecificationPartner:
      type: object
    PartnerDto:
      type: object
      properties:
        personID:
          type: integer
          format: int32
        personName:
          type: string
        timeOfRegister:
          type: string
          format: date-time
        regNr:
          type: integer
          format: int64
        partnerInfo:
          type: string
        email:
          type: string
    EmployeeSearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        name:
          type: string
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackEmployee'
    SearchSpecPackEmployee:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationEmployee'
        pageable:
          $ref: '#/components/schemas/Pageable'
    SpecificationEmployee:
      type: object
    EmployeeDto:
      type: object
      properties:
        personID:
          type: integer
          format: int32
        personName:
          type: string
        timeOfRegister:
          type: string
          format: date-time
        regNr:
          type: integer
          format: int64
        partnerInfo:
          type: string
        email:
          type: string
    EmployeeResponse:
      type: object
      properties:
        employeeId:
          type: integer
          format: int32
        username:
          type: string
        fullName:
          type: string
    AddressStandardClaim:
      type: object
      properties:
        locality:
          type: string
        formatted:
          type: string
        streetAddress:
          type: string
        postalCode:
          type: string
        country:
          type: string
        region:
          type: string
    DefaultOidcUser:
      type: object
      properties:
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        attributes:
          type: object
          additionalProperties:
            type: object
        idToken:
          $ref: '#/components/schemas/OidcIdToken'
        userInfo:
          $ref: '#/components/schemas/OidcUserInfo'
        claims:
          type: object
          additionalProperties:
            type: object
        name:
          type: string
        subject:
          type: string
        nonce:
          type: string
        issuer:
          type: string
          format: url
        audience:
          type: array
          items:
            type: string
        issuedAt:
          type: string
          format: date-time
        accessTokenHash:
          type: string
        expiresAt:
          type: string
          format: date-time
        authorizedParty:
          type: string
        authenticatedAt:
          type: string
          format: date-time
        authenticationContextClass:
          type: string
        authorizationCodeHash:
          type: string
        authenticationMethods:
          type: array
          items:
            type: string
        zoneInfo:
          type: string
        fullName:
          type: string
        givenName:
          type: string
        preferredUsername:
          type: string
        birthdate:
          type: string
        website:
          type: string
        phoneNumber:
          type: string
        middleName:
          type: string
        picture:
          type: string
        nickName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        profile:
          type: string
        gender:
          type: string
        familyName:
          type: string
        updatedAt:
          type: string
          format: date-time
        phoneNumberVerified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressStandardClaim'
        locale:
          type: string
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    OidcIdToken:
      type: object
      properties:
        tokenValue:
          type: string
        issuedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        claims:
          type: object
          additionalProperties:
            type: object
        subject:
          type: string
        nonce:
          type: string
        issuer:
          type: string
          format: url
        audience:
          type: array
          items:
            type: string
        accessTokenHash:
          type: string
        authorizedParty:
          type: string
        authenticatedAt:
          type: string
          format: date-time
        authenticationContextClass:
          type: string
        authorizationCodeHash:
          type: string
        authenticationMethods:
          type: array
          items:
            type: string
        zoneInfo:
          type: string
        fullName:
          type: string
        givenName:
          type: string
        preferredUsername:
          type: string
        birthdate:
          type: string
        website:
          type: string
        phoneNumber:
          type: string
        middleName:
          type: string
        picture:
          type: string
        nickName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        profile:
          type: string
        gender:
          type: string
        familyName:
          type: string
        updatedAt:
          type: string
          format: date-time
        phoneNumberVerified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressStandardClaim'
        locale:
          type: string
    OidcUserInfo:
      type: object
      properties:
        claims:
          type: object
          additionalProperties:
            type: object
        zoneInfo:
          type: string
        fullName:
          type: string
        givenName:
          type: string
        subject:
          type: string
        preferredUsername:
          type: string
        birthdate:
          type: string
        website:
          type: string
        phoneNumber:
          type: string
        middleName:
          type: string
        picture:
          type: string
        nickName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        profile:
          type: string
        gender:
          type: string
        familyName:
          type: string
        updatedAt:
          type: string
          format: date-time
        phoneNumberVerified:
          type: boolean
        address:
          $ref: '#/components/schemas/AddressStandardClaim'
        locale:
          type: string
    AnnouncementSearch:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        sort:
          type: string
          writeOnly: true
        dir:
          type: string
          enum:
            - ASC
            - DESC
        searchSpec:
          $ref: '#/components/schemas/SearchSpecPackAnnouncement'
    SearchSpecPackAnnouncement:
      type: object
      properties:
        specification:
          $ref: '#/components/schemas/SpecificationAnnouncement'
        pageable:
          $ref: '#/components/schemas/Pageable'
    SpecificationAnnouncement:
      type: object
