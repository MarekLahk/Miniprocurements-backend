swagger: '2.0'
info:
  description: |
    This is API documentation that will server as guidance for frontend and backend teams to integrate with eachothers systems.
  version: 1.0.0
  title: TalTech Procurement system API 
tags:
- name: procurement
  description: Asking for bids to fulfill a set of requirements.
- name: framework
  description: Framework contracts mean certain procurements have to have bids asked from certain partners.
- name: purchaser
  description: Person who is seeking to gain hold of products or services via means of procurement.
- name: partner
  description: Legal entity that can be asked for offers by a purchaser as part of a procurement.
- name: offer
  description: Promise to fulfill the terms of the procurement with a specific product or service at a specific price.
- name: user
  description: Generic user - could be auditor, administrator, visitor, purchaser etc...
- name: question
  description: Request for clarification by a partner to a purchaser in the context of a procurement
- name: answer
  description: Response by a purchaser to all partners involved in a procurement regarding a previously submitted question.
- name: attachment
  description: A document or other audio/visual file that is attached to a procurement, question or answer.

paths:
  /procurement:
    post:
      tags:
      - procurement
      summary: Add a new procurement to the system
      operationId: addProcurement
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Procurement object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Procurement'
      responses:
        400:
          description: Invalid input
      security:
      - procurement_auth:
        - write:procurement
        - read:procurement
    put:
      tags:
      - procurement
      summary: Update a existing procurement in the system
      operationId: updateProcurement
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: New values for procurement object.
        required: true
        schema:
          $ref: '#/definitions/Procurement'
      responses:
        400:
          description: Invalid parameters provided for procurement.
        404:
          description: Procurement does not exist - needs to be added first
      security:
      - procurement_auth:
        - write:procurement
        - read:procurement
  /procurement/{procurementId}:
    get:
      tags:
      - procurement
      summary: Find procurement by ID
      description: Returns a single procurement
      operationId: getProcurementById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: procurementId
        in: path
        description: ID of procurement to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Procurement'
        400:
          description: Invalid ID supplied
        404:
          description: Procurement not found
      security:
      - procurement_auth:
        - read:procurement
    delete:
      tags:
      - procurement
      summary: Deletes a procurement
      operationId: deleteProcurement
      produces:
      - application/json
      parameters:
      - name: procurementId
        in: path
        description: Procurement id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Procurement not found
      security:
      - procurement_auth:
        - write:procurement
        - read:procurement
  
  /attachment:
    post:
      tags:
      - attachment
      summary: Upload attachment
      description: Upload a file from the user to our servers and store it in the database.
      operationId: uploadAttachment
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created attachment object
        required: true
        schema:
          $ref: '#/definitions/Attachment'
      responses:
        default:
          description: successful operation
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
securityDefinitions:
  procurement_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:procurement: create/modify procurements
      read:procurement: view procurements
definitions:
  Procurement:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      duedate:
        type: string
        format: datetime
  Attachment:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      filename:
        type: string
      data:
        type: string
        format: binary
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
schemes:
 - https
 - http
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /minihanked/Minihanked/1.0.0
